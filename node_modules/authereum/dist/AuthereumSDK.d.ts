import EventEmitter from 'eventemitter3';
import AuthereumProvider from './AuthereumProvider';
export default class Authereum extends EventEmitter {
    private _apiKey;
    private apiUri;
    private rpcUri;
    private webUri;
    private xsUri;
    private notifierUri;
    private networkName;
    private networkId;
    private redirectUri;
    private provider;
    private iframeConnection;
    private childIframeConnection;
    private iframe;
    private notifier;
    private disableNotifications;
    private cachedLoginKeyAddress;
    private cachedAccountAddress;
    private cachedIsAuthenticated;
    private iframeReady;
    private _configReady;
    private iframeConnecting;
    private cacheReady;
    private readyEmitted;
    private _widgetEnabled;
    private iframeStyle;
    private blockedPopupRedirect;
    private notificationsMap;
    private _heartbeatStarted;
    private _backoffTimeout;
    private _userConfig;
    private _asymmetricEncryptionKey;
    private _authereumQueryParams;
    private _injectedElements;
    private _destroyed;
    constructor(config?: any);
    private _init;
    private _setConfig;
    private _setupCache;
    _handleWindowFocus: () => Promise<any>;
    private _resetCache;
    private _setupNotifier;
    private _injectScript;
    private _setupResizeListener;
    private _cacheLoginKeyAddress;
    private _cacheAccountAddress;
    private _cacheIsAuthenticated;
    login: (...args: any[]) => Promise<unknown>;
    authenticate: () => Promise<unknown>;
    isAuthenticated: () => Promise<any>;
    logout: () => Promise<any>;
    getAuthenticatedAccount: () => Promise<any>;
    getDappKey: () => Promise<any>;
    getLoginKey: () => Promise<any>;
    signWithDappKey: (...args: any[]) => Promise<unknown>;
    signWithLoginKey: (...args: any[]) => Promise<unknown>;
    signTypedMessageWithDappKey: (...args: any[]) => Promise<unknown>;
    signMessageWithAdminKey: (...args: any[]) => Promise<unknown>;
    signMessageWithSigningKey: (...args: any[]) => Promise<unknown>;
    getLoginKeyAuthSignature: () => Promise<any>;
    getLoginKeyRestrictionsData: () => Promise<any>;
    getAccountAddress: () => Promise<any>;
    getBalance: () => Promise<any>;
    getRpcUri: () => Promise<string>;
    getNetworkId: () => Promise<any>;
    getNetworkName: () => Promise<any>;
    getProvider: () => AuthereumProvider;
    private _handleError;
    signTransactionWithLoginKey: (...args: any[]) => Promise<unknown>;
    sendTransaction: (...args: any[]) => Promise<unknown>;
    sendTransactionBatch: (...args: any[]) => Promise<unknown>;
    estimateGasBatch: (...args: any[]) => Promise<unknown>;
    isReady: () => boolean;
    updateConfig: (config: any) => void;
    getConfig: () => {
        apiUri: string;
        rpcUri: string;
        webUri: string;
        xsUri: string;
        networkName: string;
        networkId: string;
        disableNotifications: boolean;
    };
    showWidget: (enabled?: boolean) => boolean;
    hideWidget: () => boolean;
    widgetEnabled: () => boolean;
    private _tilIframeReady;
    _tilConfigReady: () => Promise<any>;
    _tilReady: () => Promise<any>;
    private _emitReadyEvent;
    private _connectToChildIframe;
    private _startHeartbeat;
    private _heartbeat;
    private _ping;
    private _getOrCreateIframe;
    private _getConfigFromChild;
    private _postVersionToChild;
    private _postApiKeyToChild;
    private _loadAsymmetricEncryptionKeyFromChild;
    private _postMessageToChild;
    private _handleChildLogoutEvent;
    private _handleChildDappKeyExpired;
    private _handlePostMessage;
    private _handlePostMessageNotification;
    private _handlePostMessageUpdateNotificationId;
    private _handlePostMessageUpdateNotification;
    private _handlePostMessageDismissNotification;
    private _handlePostMessageLog;
    private _getWindowSize;
    private _getWindowWidth;
    private _getWindowHeight;
    setIframePositionLeft: (x: number) => void;
    setIframeWidth: (width: number) => void;
    setIframeHeight: (height: number) => void;
    private _refreshWidget;
    private _loginKeyExists;
    private _accountAddressExists;
    private _getAccountAdminKeyNonce;
    private _getAccountAuthKeyNonce;
    private _executeLoginKeyMetaTx;
    private _loadLoginKey;
    private _getOrCreateLoginKey;
    private _getAuthenticateUri;
    private _getSignWithAdminKeyUri;
    private _openPopupOrRedirect;
    private _signLoginKeyRequest;
    private _tilDomReady;
    version: () => string;
    static version: () => string;
    isAuthenticatedSync: () => boolean;
    getTransactionReceipt: (txHash: string) => Promise<any>;
    waitForTransactionReceipt: (txHash: string) => Promise<any>;
    hasRecoveryEnabled: () => Promise<any>;
    isContractDeployed: (accountAddress: string) => Promise<any>;
    private _loadSigningKey;
    private _logAnalyticsEvent;
    private _setupSigningKey;
    private _cacheAuthereumQueryParams;
    destroy: () => Promise<boolean>;
    isDestroyed: () => boolean;
    getAddressQrCodeDataUri: (address?: string) => Promise<any>;
}
