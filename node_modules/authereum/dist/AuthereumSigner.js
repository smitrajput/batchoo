"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ethers = __importStar(require("ethers"));
const AuthereumSDK_1 = __importDefault(require("./AuthereumSDK"));
class AuthereumSigner extends ethers.Signer {
    constructor(config) {
        super();
        this.config = config || {};
        this.authereum = new AuthereumSDK_1.default(this.config);
        this.provider = this.authereum.getProvider();
    }
    getAddress() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.authereum.getAccountAddress();
        });
    }
    signMessage(message) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.provider.sign(message);
        });
    }
    sign(transaction) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.provider.sign(transaction);
        });
    }
    sendTransaction(transaction) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.provider.sendTransaction(transaction);
        });
    }
    sendTransactionBatch(transactions) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.provider.sendTransactionBatch(transactions);
        });
    }
    estimateGasBatch(transactions) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.provider.estimateGasBatch(transactions);
        });
    }
}
exports.default = AuthereumSigner;
